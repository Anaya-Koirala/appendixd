File: stack.ib.bas

function IS_CORRECT(EXPRESSION, N)
    SYMBOLS = new Stack()
    TOOLS = new Array("(", ")", "[", "]", "{", "}", "<", ">")
    loop I from 0 to N - 1
        C = EXPRESSION[I]
        if C = "(" or C = "[" or C = "{" or C = "<" then
            SYMBOLS.push(C)
        end if
        loop J from 0 to 3
            if EXPRESSION[I] = TOOLS[2 * J + 1] then
                if SYMBOLS.isEmpty() then
                    return false
                end if
                if SYMBOLS.pop() ≠ TOOLS[2 * J] then
                    return false
                end if
            end if
        end loop
    end loop
    return SYMBOLS.isEmpty()
end function

EXPRESSION = new Array("(", "[", "]", "<", ">", ")")
output "EXPRESSION: ", EXPRESSION
output IS_CORRECT(EXPRESSION, 6)

EXPRESSION = new Array("(", "[", "]", "<", ">", "(")
output "EXPRESSION: ", EXPRESSION
output IS_CORRECT(EXPRESSION, 6)


File: collection.ib.bas

function ITEMS_DIVISIBLE_BY(ITEMS, N)
    // Where ITEMS is a collection of integers and N 
    // is an integer factor.
    RESULT = new Collection()
    ITEMS.resetNext()
    loop while ITEMS.hasNext()
        ITEM = ITEMS.getNext()
        if ITEM mod N = 0 then
            RESULT.addItem(ITEM)
        end if
    end loop
    return RESULT
end function

ITEMS = new Collection(7, 5, 3, 10, 15, 25, 16)
FILTERED = ITEMS_DIVISIBLE_BY(ITEMS, 5)

FILTERED.resetNext()
loop while FILTERED.hasNext()
    X = FILTERED.getNext()
    output X
end loop


File: array.ib.bas

function CONTAINS(NEEDLE, HAYSTACK, N)
    FOUND = false
    loop K from 0 to N-1
        if HAYSTACK[K] = NEEDLE then
            FOUND = true
        end if
    end loop
    return FOUND
end function

HAYSTACK = new Array(2, 3, 5, 7, 11, 13, 17, 19)
output "HAYSTACK:", HAYSTACK
output "5 is in HAYSTACK?"
output CONTAINS(5, HAYSTACK, 8)
output "4 is in HAYSTACK?"
output CONTAINS(4, HAYSTACK, 8)


File: recursive.ib.bas

function FIB(N)
    if N < 2 then
        return 1
    end if
    return FIB(N - 1) + FIB(N - 2)
end function

output FIB(10)


File: input.ib.bas

output "Input a name."
input NAME
output "Hello ", NAME, " nice to meet you!\n\n"

output "Input an integer."
input COUNT as int

if COUNT mod 2 = 0 then
    output COUNT, "is even..."
else
    output COUNT, "is odd..."
end if

output "Enter an integer: "
input INTEGER as int

loop I from 0 to 10
	output I , " x 10 = " , I * 10
end loop



File: queue.ib.bas

function BIGGEST_FIRST(C1, C2)
    Q = new Queue()
    C1.resetNext()
    C2.resetNext()
    loop while C1.hasNext() or C2.hasNext()
        if C1.hasNext() and C2.hasNext() then
            X = C1.getNext()
            Y = C2.getNext()
            if X > Y then
                Q.enqueue(X)
                Q.enqueue(Y)
            else
                Q.enqueue(Y)
                Q.enqueue(X)
            end if
        else
            if C1.hasNext() then
                Q.enqueue(C1.getNext())
            else
                Q.enqueue(C2.getNext())
            end if
        end if
    end loop
    return Q
end function

ITEMS_1 = new Collection(9, 10, 5, -1, 3)
output "ITEMS_1:", ITEMS_1 

ITEMS_2 = new Collection(5, 15, -4, 0, 5, 10)
output "ITEMS_2:", ITEMS_2

QUEUE = BIGGEST_FIRST(ITEMS_1, ITEMS_2)
output "QUEUE:"
loop while not QUEUE.isEmpty()
    output QUEUE.dequeue()
end loop


File: 2d_array.ib.bas

procedure PLUNDER(BOARD, ROWS, COLUMNS)
    ROW = 0
    COLUMN = 0
    RIGHT = 0
    DOWN = 1
    DIRECTION = RIGHT
    LOOT = 0

    loop while ROW < ROWS and COLUMN < COLUMNS
        LOOK = BOARD[ROW][COLUMN]
        if LOOK ≥ 0 then
            LOOT = LOOT + LOOK
        else
            if DIRECTION = RIGHT then
                DIRECTION = DOWN
            else
                DIRECTION = RIGHT
            end if
        end if
        if DIRECTION = RIGHT then
            COLUMN = COLUMN + 1
        else
            ROW = ROW + 1
        end if
    end loop

    if COLUMN = COLUMNS then
        output "right"
    else
        output "bottom"
    end if
    output LOOT
end procedure

BOARD = new Array(
    new Array(5, 10, -3, 4, 6), 
    new Array(-2, 14, -5, 2, -1), 
    new Array(8, -9, -5, 5, 12),
    new Array(1, 20, -3, 8, -10)
)

ROWS = 4
COLUMNS = 5
PLUNDER(BOARD, ROWS, COLUMNS)


